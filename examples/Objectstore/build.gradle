import groovy.json.JsonSlurper

// use a thirdparty utility to download the spark package
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.0'
    }
}

plugins { 
    id 'java' 
    id "de.undercouch.download" version "3.0.0"
}

import de.undercouch.gradle.tasks.download.Download

// get the objectstore connection details from connection.properties
def props = new Properties()
props.load(new FileInputStream("$projectDir/../../connection.properties"))

def os_auth_url    = props.objectstore_auth_url
def os_tenant      = props.objectstore_tenant
def os_username    = props.objectstore_username
def os_password    = props.objectstore_password
def os_region      = props.objectstore_region
def os_auth_method = props.objectstore_auth_method
def os_container   = "${new Date().getTime()}"

// read the vcap.json file and extract the cluster_master_url
def slurper = new JsonSlurper()
def vcaptext = file('../../vcap.json').text
def cluster_master_url = slurper.parseText( vcaptext ).credentials.cluster_master_url
assert cluster_master_url != null

// download the spark package for object store access
task('SetupLibs', type: Download) {
    src 'http://repo1.maven.org/maven2/com/ibm/stocator/stocator/1.0.2/stocator-1.0.2.jar'
    dest buildDir
    acceptAnyCertificate true
    onlyIfNewer true
    quiet true
}


task("DeleteOutput", type:Delete) {
   delete fileTree('./') {
        include '**/*.log'
        include '**/stderr_*'
        include '**/stdout_*'
    }
}

def encode(val) {
    return val.getBytes('UTF-8').encodeBase64()
}

task('ExamplePush', dependsOn: [DeleteOutput, SetupLibs]) << {

    def cmd = ["../../spark-submit.sh",
                           "--vcap", "../../vcap.json",
                           "--deploy-mode", "cluster",
                           "--master", "${cluster_master_url}",
                           "--jars", "./build/stocator-1.0.2.jar",
                           "--files", "./LICENSE",
                           "./exporttoswift.py",
                               "file://LICENSE",
                               encode(os_auth_url),
                               encode(os_tenant),
                               encode(os_username),
                               encode(os_password),
                               encode(os_region),
                               encode(os_auth_method),
                               encode(os_container)]
    println cmd.join(" ") // print out command executed for debugging purposes

    exec {
        commandLine cmd
    }
}

// To test importing (pulling) data, we use the ExamplePush task to create some data in objectstore 
// for us to import
task('ExamplePull', dependsOn: ExamplePush) << {

    def cmd = ["../../spark-submit.sh",
                           "--vcap", "../../vcap.json",
                           "--deploy-mode", "cluster",
                           "--master", "${cluster_master_url}",
                           "--jars", "./build/stocator-1.0.2.jar",
                           "./importfromswift.py",
                               encode(os_auth_url),
                               encode(os_tenant),
                               encode(os_username),
                               encode(os_password),
                               encode(os_region),
                               encode(os_auth_method),
                               encode(os_container)]
    println cmd.join(" ") // print out command executed for debugging purposes

    exec {
        commandLine cmd
    }
}


task('Example') {
    dependsOn ExamplePush, ExamplePull
}
