import groovy.json.JsonSlurper

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.ibm.stocator:stocator:1.0.2'
        // uberjar
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
    }
}

plugins { id 'java' }

def props = new Properties()
props.load(new FileInputStream("$projectDir/../../connection.properties"))

def os_auth_url    = props.objectstore_auth_url
def os_tenant      = props.objectstore_tenant
def os_username    = props.objectstore_username
def os_password    = props.objectstore_password
def os_region      = props.objectstore_region
def os_auth_method = props.objectstore_auth_method
def os_container   = "${new Date().getTime()}"

def slurper = new JsonSlurper()
def vcaptext = file('../../vcap.json').text
def cluster_master_url = slurper.parseText( vcaptext ).credentials.cluster_master_url
assert cluster_master_url != null

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // the spark swift library
    compile 'com.ibm.stocator:stocator:1.0.2'
}

// create jar file with all dependencies
task('SetupLibs', type: Jar) {
    baseName = 'stocator-library-with-dependencies'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


task("DeleteOutput", type:Delete) {
   delete fileTree('./') {
        include '**/*.log'
        include '**/stderr_*'
        include '**/stdout_*'
    }
}


task('ExamplePush', dependsOn: [DeleteOutput, SetupLibs], type: Exec) {

    def cmd = ["../../spark-submit.sh",
                           "--vcap", "../../vcap.json",
                           "--deploy-mode", "cluster",
                           "--master", "${cluster_master_url}",
                           "--jars", "./build/libs/stocator-library-with-dependencies.jar",
                           "--files", "./LICENSE",
                           "./exporttoswift.py",
                               "file://LICENSE",
                               "'${os_auth_url}'",
                               "'${os_tenant}'",
                               "'${os_username}'",
                               "'${os_password}'",
                               "'${os_region}'",
                               "'${os_auth_method}'",
                               "'${os_container}'"]
    println cmd.join(" ") // print out command executed for debugging purposes
    commandLine cmd
}

// To test importing (pulling) data, we use the ExamplePush task to create some data in objectstore 
// for us to import
task('ExamplePull', dependsOn: ExamplePush, type: Exec) {

    def cmd = ["../../spark-submit.sh",
                           "--vcap", "../../vcap.json",
                           "--deploy-mode", "cluster",
                           "--master", "${cluster_master_url}",
                           "--jars", "./build/libs/stocator-library-with-dependencies.jar",
                           "./importfromswift.py",
                               "'${os_auth_url}'",
                               "'${os_tenant}'",
                               "'${os_username}'",
                               "'${os_password}'",
                               "'${os_region}'",
                               "'${os_auth_method}'",
                               "'${os_container}'"]
    println cmd.join(" ") // print out command executed for debugging purposes
    commandLine cmd
}


task('Example') {
    dependsOn ExamplePush, ExamplePull
}
