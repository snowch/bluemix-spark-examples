import static org.gradle.testfixtures.ProjectBuilder.*
import static org.gradle.testkit.runner.TaskOutcome.*
import org.gradle.testfixtures.ProjectBuilder


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-all:2.0.5'
        classpath gradleTestKit()
    }
}

plugins { id 'java' }

ext.build_failed = false
    
ext.gradleVersion = '2.9'

////////////////////////////////////////////////////////////////////////////////

task wrapper(type: Wrapper) {
    gradleVersion = gradleVersion
}

// utility task to setup wrapper in top level project and sub projects
task setupWrapper (dependsOn: wrapper) << {

    new File("${projectDir}/examples").traverse( maxDepth: 0, type: groovy.io.FileType.DIRECTORIES ){ dir ->
        println "Wrapping examples directory ${dir.absolutePath}"
        exec {
            workingDir dir
            commandLine "${projectDir}/gradlew", "wrapper", "--gradle-version", gradleVersion
        }
    }
}

////////////////////////////////////////////////////////////////////////////////


def buildProject(proj) {
    
    def subTasks = ProjectBuilder.builder()
                .withProjectDir(file("./examples/${proj}/"))
                .build()    
                .getTasksByName("Example", false).first()
                .getDependsOn()

    subTasks.each { subTask ->

        def tries = 0
        def test_failed = true

        // tests may fail due to unavailability of 3rd party service
        // so we need to retry a few times in the event of a failure
        while (tries < 3) {
            // ensure we have a clean environment for each test
            try {
                GradleRunner.create()
                        .withProjectDir(file("./examples/${proj}/"))
                        .withArguments('clean')
                        .build()
            } catch (Exception e) {
                // noop - some projects don't have clean tasks
            }

            if (!(subTask instanceof org.gradle.api.Task)) {
                // if this isn't a task, skip it and continue to next subTask in subTasks.each closure
                return false
            }
            try {
                FileWriter writer = new FileWriter("build/test/${proj}-${subTask.name}.txt")
                GradleRunner.create()
                        .withProjectDir(file("./examples/${proj}/"))
                        .forwardStdError(writer)
                        .forwardStdOutput(writer)
                        .withArguments([subTask.name, '-PdebugExample'])
                        .build()
                writer.close()
            } catch (Exception e) { 
                // try again
                tries = tries++
                continue // continue while loop
            }
            // test was succesfull - exit try loop
            test_failed = false
            break
        }
        if (test_failed) {
            project.build_failed = true
            println "Test failed  ${proj}::${subTask.name}"
        } else {
            println "Test passed  ${proj}::${subTask.name}"
        }
    }
}

task testSetup() {

    delete('build')
    mkdir('build/test')
}


task baseTest(dependsOn: testSetup) << {

    if (!project.hasProperty('summaryOutput')) {
        println "Running with detailed test output (for summary output, run gradle with -PsummaryOutput)"
    }

    println "Running base tests"

    [
      'Objectstore',
      'Elasticsearch',
      'Cloudant',
      'DashDB'
    ]
    .each() { proj -> buildProject(proj) }

    if (project.build_failed) {
        throw new GradleException("One or more tests failed")
    }
}

task check(dependsOn: baseTest, type: Test, overwrite: true) << {
    println "Finished running tests."
    println "*** Test output can be found in '${projectDir}/build/test/' ***"
}


////////////////////////////////////////////////////////////////////////////////
